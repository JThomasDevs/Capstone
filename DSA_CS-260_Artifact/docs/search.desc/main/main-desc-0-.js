searchState.loadedDescShard("main", 0, "AVL tree for storing courses, self-balancing on insertions …\nEnum to specify which child (left or right) to operate on.\nRepresents a course with an ID, name, and prerequisites.\nNode in the AVL tree, containing a Course and child …\nThe Course stored in this node.\nUnique identifier for the course.\nName of the course.\nHelper to find the in-order successor node to a node with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the balance factor of a node (left height - right …\nReturns the height of a node, or -1 if the node is None.\nHeight of the node in the tree.\nPerforms a recursive in-order traversal of the AVL tree …\nInserts a course into the AVL tree.\nRecursively inserts a node into the subtree, rebalancing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeft child node.\nLoads courses from a CSV file, validates prerequisites, …\nEntry point for the program. Handles user interaction and …\nCreates a new, empty AVL tree.\nList of prerequisite course IDs.\nPrints detailed information about a course if it exists, …\nPrints the main menu to the console.\nRebalances a node and returns the new subtree root. This …\nRemoves a node from the AVL tree by course ID, using the …\nRecursively removes a node by course ID and rebalances the …\nRight child node.\nRoot node of the AVL tree.\nPerforms a left rotation on the given node and returns the …\nPerforms a right rotation on the given node and returns …\nSearches for a node in the AVL tree by Course ID, starting …\nSets the left or right child of a parent node using the …\nUpdates the height of a node based on the heights of its …")